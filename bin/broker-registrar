#!/usr/bin/env ruby

require 'optparse'
require 'cfoundry'
require 'httparty'
require_relative '../lib/broker_registrar'

def usage
  <<-USAGE
Usage: broker-registrar register|delete OPTS

Required options:
--cf-address <URL>
--cf-username <CF username>
--cf-password <CF password>
--broker-name <broker name>
--broker-url <broker URL>
--broker-username <broker username>
--broker-password <broker password>

USAGE
end

def parse_arguments
  options = {}
  option_parser = OptionParser.new do |opts|
    opts.banner = usage

    opts.on('--cf-address URL', 'Cloud Foundry URL') do |cf_address|
      options[:cf_address] = cf_address
    end
    opts.on('--cf-username USERNAME', 'Cloud Foundry username') do |cf_username|
      options[:cf_username] = cf_username
    end
    opts.on('--cf-password PASSWORD', 'Cloud Foundry password') do |cf_password|
      options[:cf_password] = cf_password
    end
    opts.on('--broker-name BROKER_NAME', 'Broker name') do |broker_name|
      options[:broker_name] = broker_name
    end
    opts.on('--broker-url BROKER_URL', 'Broker URL') do |broker_url|
      options[:broker_url] = broker_url
    end
    opts.on('--broker-username BROKER_USERNAME', 'Broker username') do |broker_username|
      options[:broker_username] = broker_username
    end
    opts.on('--broker-password BROKER_PASSWORD', 'Broker password') do |broker_password|
      options[:broker_password] = broker_password
    end
  end

  option_parser.parse!

  raise OptionParser::MissingArgument.new('cf-address') if options[:cf_address].nil?
  raise OptionParser::MissingArgument.new('cf-username') if options[:cf_username].nil?
  raise OptionParser::MissingArgument.new('cf-password') if options[:cf_password].nil?
  raise OptionParser::MissingArgument.new('broker-name') if options[:broker_name].nil?
  raise OptionParser::MissingArgument.new('broker-url') if options[:broker_url].nil?
  raise OptionParser::MissingArgument.new('broker-username') if options[:broker_username].nil?
  raise OptionParser::MissingArgument.new('broker-password') if options[:broker_password].nil?

  options
end

begin
  logger = Logger.new(STDOUT)
  if ARGV.first == 'register'
    BrokerRegistrar.new(logger).register(parse_arguments)
  elsif ARGV.first == 'delete'
    BrokerRegistrar.new(logger).delete(parse_arguments)
  else
    raise 'Unknown command'
  end

rescue => e
  puts usage if e.is_a? OptionParser::MissingArgument || e.message == 'Unknown command'

  error_logger = Logger.new(STDERR)
  error_logger.error(e)
  exit 1
end

exit 0
